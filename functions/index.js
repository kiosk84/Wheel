const { Telegraf } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const express = require('express');
const cors = require('cors'); // –î–æ–±–∞–≤–∏–ª–∏ cors

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
const db = new sqlite3.Database('./fortune.db', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', err);
  } else {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite');
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL UNIQUE
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS pending (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL UNIQUE
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS winners (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL,
      prize INTEGER NOT NULL,
      timestamp INTEGER NOT NULL
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS prize_pool (
      id INTEGER PRIMARY KEY,
      amount INTEGER NOT NULL
    )
  `);
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (!row) {
      db.run('INSERT INTO prize_pool (id, amount) VALUES (1, 0)');
    }
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf('8123757486:AAGgoxj37dpIF4EVdJVoAfxNUqQTYCFWxmA');

// ID –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
const ADMIN_ID = '192363865';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('start', (ctx) => {
  if (ctx.from.id.toString() === ADMIN_ID) {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/winners - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n/prizepool - –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥\n/approve <–∏–º—è> - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n/reject <–∏–º—è> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
  } else {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã! –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª!', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîµ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª', url: 'https://t.me/channel_fortune' }
          ]
        ]
      }
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('help', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/winners - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n/prizepool - –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥\n/approve <–∏–º—è> - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n/reject <–∏–º—è> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
});

// –ö–æ–º–∞–Ω–¥–∞ /participants (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('participants', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.all('SELECT name FROM participants', (err, rows) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
      return;
    }
    if (!rows || rows.length === 0) {
      ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.');
      return;
    }
    const list = rows.map(r => r.name).join('\n');
    ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n' + list);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /winners (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('winners', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.all('SELECT name, prize, date FROM winners ORDER BY date DESC LIMIT 10', (err, rows) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
      return;
    }
    if (!rows || rows.length === 0) {
      ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.');
      return;
    }
    const list = rows.map(r => `${r.name} - ${r.prize}‚ÇΩ (${r.date})`).join('\n');
    ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n' + list);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /prizepool (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('prizepool', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (err || !row) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞.');
      return;
    }
    ctx.reply(`–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${row.amount}‚ÇΩ`);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /approve (–∞–¥–º–∏–Ω)
bot.command('approve', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }

  const name = ctx.message.text.split(' ')[1];
  if (!name) {
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: /approve <–∏–º—è>');
    return;
  }

  db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
      console.error('–û—à–∏–±–∫–∞ approve:', err);
      return;
    }
    if (!row) {
      ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.');
      return;
    }

    db.run(
      'INSERT INTO participants (name, telegramId) VALUES (?, ?)',
      [name, row.telegramId],
      (err) => {
        if (err) {
          ctx.reply('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
          console.error('–û—à–∏–±–∫–∞ approve insert:', err);
          return;
        }

        db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ pending:', err);
          }
        });

        db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1', (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞:', err);
          }
        });

        ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!`);
      }
    );
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /reject (–∞–¥–º–∏–Ω)
bot.command('reject', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }

  const name = ctx.message.text.split(' ')[1];
  if (!name) {
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: /reject <–∏–º—è>');
    return;
  }

  db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
      console.error('–û—à–∏–±–∫–∞ reject:', err);
      return;
    }
    if (!row) {
      ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.');
      return;
    }

    db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
      if (err) {
        ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
        console.error('–û—à–∏–±–∫–∞ reject delete:', err);
        return;
      }
      ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
    });
  });
});

// –§—É–Ω–∫—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
function runLottery() {
  return new Promise((resolve, reject) => {
    db.all('SELECT * FROM participants', [], (err, participants) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
        reject('Database error');
        return;
      }
      if (!participants || participants.length === 0) {
        console.log('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.');
        bot.telegram.sendMessage(ADMIN_ID, '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
        resolve(null);
        return;
      }

      const winner = participants[Math.floor(Math.random() * participants.length)];
      const prizePool = participants.length * 100;

      db.run(
        'INSERT INTO winners (name, telegramId, prize, timestamp) VALUES (?, ?, ?, ?)',
        [winner.name, winner.telegramId, prizePool, Date.now()],
        (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', err);
            bot.telegram.sendMessage(ADMIN_ID, '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.');
            reject('Database error');
            return;
          }

          // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
          participants.forEach((participant) => {
            if (participant.telegramId === winner.telegramId) {
              // –ü–æ–±–µ–¥–∏—Ç–µ–ª—é ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
              bot.telegram.sendMessage(
                participant.telegramId,
                `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${participant.name}! üéâ\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ö–æ–ª–µ—Å–∞ –§–æ—Ä—Ç—É–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–∑: ${prizePool} ‚ÇΩ!\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`
              );
            } else {
              // –û—Å—Ç–∞–ª—å–Ω—ã–º ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              bot.telegram.sendMessage(
                participant.telegramId,
                `–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}\n–ü—Ä–∏–∑: ${prizePool} ‚ÇΩ\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!`
              );
            }
          });

          bot.telegram.sendMessage(
            ADMIN_ID,
            `–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}\n–ü—Ä–∏–∑: ${prizePool} ‚ÇΩ\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏–∑–∞.`
          );

          db.run('DELETE FROM participants', [], (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
          });
          db.run('UPDATE prize_pool SET amount = 0 WHERE id = 1', (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞:', err);
          });

          console.log('–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner.name);
          resolve(winner.name);
        }
      );
    });
  });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ 20:00
setInterval(() => {
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  const seconds = now.getSeconds();

  if (hours === 20 && minutes === 0 && seconds === 0) {
    runLottery();
  }
}, 1000);

// –ö–æ–º–∞–Ω–¥–∞ /spin (–∞–¥–º–∏–Ω)
bot.command('spin', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  runLottery().then(() => {
    ctx.reply('–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω!');
  }).catch((error) => {
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.');
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å long polling');
});

// Express API
const app = express();
app.use(express.json());
app.use(cors()); // –î–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É CORS

// –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
app.get('/participants', (req, res) => {
  db.all('SELECT name FROM participants', (err, rows) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
    } else {
      res.json(rows.map(row => row.name));
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö
app.get('/pending', (req, res) => {
  db.all('SELECT name FROM pending', (err, rows) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
    } else {
      res.json(rows.map(row => row.name));
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
app.get('/winners', (req, res) => {
  db.all('SELECT name, prize, timestamp FROM winners ORDER BY timestamp DESC LIMIT 5', (err, rows) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
    } else {
      res.json(rows.map(row => ({
        name: row.name,
        prize: row.prize,
        date: new Date(row.timestamp).toLocaleDateString('ru-RU')
      })));
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
app.get('/prizepool', (req, res) => {
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
    } else {
      res.json({ amount: row.amount });
    }
  });
});

// POST /pending - –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ pending
app.post('/pending', (req, res) => {
  const { name, telegramId } = req.body;
  if (!name || !telegramId) {
    return res.status(400).json({ error: 'Name and telegramId required' });
  }
  db.get('SELECT * FROM pending WHERE name = ?', [name], (err, row) => {
    if (row) {
      return res.status(409).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
    }
    db.get('SELECT * FROM participants WHERE name = ?', [name], (err, row) => {
      if (row) {
        return res.status(409).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
      }
      db.run('INSERT INTO pending (name, telegramId) VALUES (?, ?)', [name, telegramId], (err) => {
        if (err) {
          return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏' });
        }
        // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        bot.telegram.sendMessage(
          ADMIN_ID,
          `–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n–ò–º—è: ${name}\nTelegram ID: ${telegramId}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${name}` },
                  { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${name}` }
                ]
              ]
            }
          }
        );
        res.json({ success: true });
      });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.on('callback_query', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    return;
  }
  const data = ctx.callbackQuery.data;
  if (data.startsWith('approve_')) {
    const name = data.replace('approve_', '');
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É /approve
    db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
      if (err || !row) {
        ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      db.run('INSERT INTO participants (name, telegramId) VALUES (?, ?)', [name, row.telegramId], (err) => {
        if (err) {
          ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
          return;
        }
        db.run('DELETE FROM pending WHERE name = ?', [name]);
        db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1');
        ctx.editMessageText(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω!`);
        ctx.answerCbQuery('–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!');
      });
    });
  } else if (data.startsWith('reject_')) {
    const name = data.replace('reject_', '');
    db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
      if (err) {
        ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
        return;
      }
      ctx.editMessageText(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${name} –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
      ctx.answerCbQuery('–£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω!');
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
app.delete('/participants/:name', (req, res) => {
  const name = req.params.name;
  db.get('SELECT name FROM participants WHERE name = ?', [name], (err, row) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
      return;
    }
    if (!row) {
      res.status(404).json({ error: 'Participant not found' });
      return;
    }
    db.run('DELETE FROM participants WHERE name = ?', [name], (err) => {
      if (err) {
        res.status(500).json({ error: 'Database error' });
        return;
      }
      db.run('UPDATE prize_pool SET amount = amount - 100 WHERE id = 1', (err) => {
        if (err) {
          res.status(500).json({ error: 'Database error' });
          return;
        }
        res.json({ success: true });
      });
    });
  });
});

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–¥–ª—è –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.post('/spin', (req, res) => {
  const { adminId } = req.body;
  if (adminId !== ADMIN_ID) {
    return res.status(403).json({ error: 'Access denied' });
  }
  runLottery().then((winner) => {
    if (winner) {
      res.json({ success: true, winner });
    } else {
      res.json({ success: false, message: 'No participants' });
    }
  }).catch((error) => {
    res.status(500).json({ error: 'Database error' });
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => {
  console.log('API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã
process.on('SIGINT', () => {
  db.close((err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã:', err);
    }
    console.log('–ë–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–∞');
    process.exit();
  });
});
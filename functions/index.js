require('dotenv').config({ path: '../.env' });
const db = require('./db');
const { bot, ADMIN_ID } = require('./bot');
const express = require('express');
const cors = require('cors');
const logger = require('./logger');
const bodyParser = require('body-parser');
// Route handlers
const participantsRoute = require('./routes/participants');
const pendingRoute = require('./routes/pending');
const winnersRoute = require('./routes/winners');
const prizepoolRoute = require('./routes/prizepool');
const spinRoute = require('./routes/spin');
const timerRoute = require('./routes/timer');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL UNIQUE
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS pending (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL UNIQUE
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS winners (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      telegramId TEXT NOT NULL,
      prize INTEGER NOT NULL,
      timestamp INTEGER NOT NULL
    )
  `);
  db.run(`
    CREATE TABLE IF NOT EXISTS prize_pool (
      id INTEGER PRIMARY KEY,
      amount INTEGER NOT NULL
    )
  `);
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (!row) {
      db.run('INSERT INTO prize_pool (id, amount) VALUES (1, 0)');
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞! –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.', {
    reply_markup: {
      keyboard: [[{ text: '/join' }], [{ text: '/spin' }], [{ text: '/winners' }]],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('start', (ctx) => {
  if (ctx.from.id.toString() === ADMIN_ID) {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚û°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.HOST_URL}?telegramId=${ctx.from.id}` } }],
          [{ text: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data: 'getParticipants' }, { text: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'getWinners' }],
          [{ text: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥', callback_data: 'getPrizePool' }, { text: '–°–±—Ä–æ—Å', callback_data: 'reset' }],
          [{ text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä', callback_data: 'timerPrompt' }, { text: '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data: 'deletePrompt' }]
        ]
      }
    });
  } else {
    ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã¬ª!
‚ú® –¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ —Å–æ—Ä–≤–∞—Ç—å –∫—É—à! üî•

üéÅ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –º—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã.
‚úÖ –í—Å—ë —á–µ—Å—Ç–Ω–æ, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!

‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ —Å–∫–æ—Ä–æ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! üçÄ`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚û°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ', web_app: { url: `${process.env.HOST_URL}?telegramId=${ctx.from.id}` } }
          ],
          [
            { text: 'üîµ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª', url: 'https://t.me/channel_fortune' }
          ]
        ]
      }
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('help', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/winners - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n/prizepool - –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥\n/approve <–∏–º—è> - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n/reject <–∏–º—è> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
});

// –ö–æ–º–∞–Ω–¥–∞ /participants (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('participants', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.all('SELECT name FROM participants', (err, rows) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
      return;
    }
    if (!rows || rows.length === 0) {
      ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.');
      return;
    }
    const list = rows.map(r => r.name).join('\n');
    ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n' + list);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /winners (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('winners', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.all('SELECT name, prize, date FROM winners ORDER BY date DESC LIMIT 10', (err, rows) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
      return;
    }
    if (!rows || rows.length === 0) {
      ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.');
      return;
    }
    const list = rows.map(r => `${r.name} - ${r.prize}‚ÇΩ (${r.date})`).join('\n');
    ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n' + list);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /prizepool (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('prizepool', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (err || !row) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞.');
      return;
    }
    ctx.reply(`–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${row.amount}‚ÇΩ`);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /approve (–∞–¥–º–∏–Ω)
bot.command('approve', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }

  const name = ctx.message.text.split(' ')[1];
  if (!name) {
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: /approve <–∏–º—è>');
    return;
  }

  db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
      logger.error('–û—à–∏–±–∫–∞ approve:', err);
      return;
    }
    if (!row) {
      ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.');
      return;
    }

    db.run(
      'INSERT INTO participants (name, telegramId) VALUES (?, ?)',
      [name, row.telegramId],
      (err) => {
        if (err) {
          ctx.reply('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
          logger.error('–û—à–∏–±–∫–∞ approve insert:', err);
          return;
        }

        db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
          if (err) {
            logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ pending:', err);
          }
        });

        db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1', (err) => {
          if (err) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞:', err);
          }
        });

        ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!`);
      }
    );
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /reject (–∞–¥–º–∏–Ω)
bot.command('reject', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return;
  }

  const name = ctx.message.text.split(' ')[1];
  if (!name) {
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: /reject <–∏–º—è>');
    return;
  }

  db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
    if (err) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
      logger.error('–û—à–∏–±–∫–∞ reject:', err);
      return;
    }
    if (!row) {
      ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö.');
      return;
    }

    db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
      if (err) {
        ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
        logger.error('–û—à–∏–±–∫–∞ reject delete:', err);
        return;
      }
      ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
bot.action(/approve_(.+)/, (ctx) => {
  const name = ctx.match[1];
  if (ctx.from.id.toString() !== ADMIN_ID) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  db.get('SELECT telegramId FROM pending WHERE name = ?', [name], (err, row) => {
    if (err) return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ë–î');
    if (!row) return ctx.answerCbQuery('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    db.run('INSERT INTO participants (name, telegramId) VALUES (?, ?)', [name, row.telegramId], (err) => {
      if (err) return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
      db.run('DELETE FROM pending WHERE name = ?', [name]);
      db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1');
      ctx.editMessageReplyMarkup(); // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
      ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!`);
      ctx.answerCbQuery();
    });
  });
});

bot.action(/reject_(.+)/, (ctx) => {
  const name = ctx.match[1];
  if (ctx.from.id.toString() !== ADMIN_ID) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
  db.run('DELETE FROM pending WHERE name = ?', [name], (err) => {
    if (err) return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
    ctx.editMessageReplyMarkup();
    ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
    ctx.answerCbQuery();
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('spin', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.reply('üé° –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...').then(() => {
    db.all('SELECT name, telegramId FROM participants', (err, rows) => {
      if (err) { ctx.reply('–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.'); return; }
      if (!rows || rows.length === 0) { ctx.reply('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∏–Ω–∞.'); return; }
      const winner = rows[Math.floor(Math.random() * rows.length)];
      const prize = Math.floor(Math.random() * 1000) + 100;
      const timestamp = Date.now();
      db.run(
        'INSERT INTO winners (name, telegramId, prize, timestamp) VALUES (?, ?, ?, ?)',
        [winner.name, winner.telegramId, prize, timestamp],
        (err) => { if (err) logger.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', err); }
      );
      ctx.reply(`üéä –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}! –ü—Ä–∏–∑: ${prize}‚ÇΩ`);
    });
  });
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('reset', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  db.serialize(() => {
    db.run('DELETE FROM participants');
    db.run('DELETE FROM pending');
    db.run('DELETE FROM winners');
    db.run('UPDATE prize_pool SET amount = 0 WHERE id = 1');
  });
  ctx.reply('–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: —É—á–∞—Å—Ç–Ω–∏–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ, –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —Å–±—Ä–æ—à–µ–Ω.');
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('delete', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  const parts = ctx.message.text.split(' ');
  if (parts.length < 2) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è: /delete <–∏–º—è>');
  const name = parts.slice(1).join(' ');
  db.serialize(() => {
    db.run('DELETE FROM participants WHERE name = ?', [name]);
    db.run('DELETE FROM pending WHERE name = ?', [name]);
  });
  ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫ ${name} —É–¥–∞–ª—ë–Ω.`);
});

// Callback actions for inline buttons
bot.action('getParticipants', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  db.all('SELECT name FROM participants', (err, rows) => {
    if (err) return ctx.reply('–û—à–∏–±–∫–∞');
    const list = rows.map(r => r.name).join('\n') || '–ü—É—Å—Ç–æ';
    ctx.reply(`–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n${list}`);
  });
});

bot.action('getWinners', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  db.all('SELECT name, prize FROM winners', (err, rows) => {
    if (err) return ctx.reply('–û—à–∏–±–∫–∞');
    const list = rows.map(r => `${r.name} ‚Äî ${r.prize}‚ÇΩ`).join('\n') || '–ü—É—Å—Ç–æ';
    ctx.reply(`–ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n${list}`);
  });
});

bot.action('getPrizePool', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  db.get('SELECT amount FROM prize_pool WHERE id = 1', (err, row) => {
    if (err) return ctx.reply('–û—à–∏–±–∫–∞');
    ctx.reply(`–¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${row.amount}‚ÇΩ`);
  });
});

bot.action('reset', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  db.serialize(() => {
    db.run('DELETE FROM participants');
    db.run('DELETE FROM pending');
    db.run('DELETE FROM winners');
    db.run('UPDATE prize_pool SET amount = 0 WHERE id = 1');
  });
  ctx.reply('–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.');
});

bot.action('spin', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  ctx.reply('üé° –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...').then(() => {
    db.all('SELECT name, telegramId FROM participants', (err, rows) => {
      const winner = rows[Math.floor(Math.random() * rows.length)];
      const prize = Math.floor(Math.random() * 1000);
      db.run('INSERT INTO winners (name, telegramId, prize, timestamp) VALUES (?, ?, ?, ?)', [winner.name, winner.telegramId, prize, Date.now()]);
      ctx.reply(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}, –ø—Ä–∏–∑: ${prize}‚ÇΩ`);
    });
  });
});

bot.action('deletePrompt', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete <–∏–º—è>');
});

bot.action('timerPrompt', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–ø–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM: /settimer HH:MM');
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
let scheduledSpin;
bot.command('settimer', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_ID) return;
  const parts = ctx.message.text.split(' ');
  if (parts.length < 2) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /settimer HH:MM');
  const [hh, mm] = parts[1].split(':').map(Number);
  if (isNaN(hh) || isNaN(mm) || hh<0 || hh>23 || mm<0 || mm>59) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
  // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
  if (scheduledSpin) clearTimeout(scheduledSpin);
  const now = new Date();
  let target = new Date(now);
  target.setHours(hh, mm, 0, 0);
  if (target <= now) target.setDate(target.getDate()+1);
  const diff = target - now;
  ctx.reply(`–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${parts[1]}. –°–ø–∏–Ω: ${target.toLocaleString()}`);
  scheduledSpin = setTimeout(() => {
    const chatId = ctx.chat.id;
    bot.telegram.sendMessage(chatId, 'üé° –ê–≤—Ç–æ—Å–ø–∏–Ω: –≤—Ä–∞—â–∞–µ–º –∫–æ–ª–µ—Å–æ...');
    db.all('SELECT name, telegramId FROM participants', (err, rows) => {
      if (err || !rows.length) {
        return bot.telegram.sendMessage(chatId, '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∏–Ω–∞.');
      }
      const winner = rows[Math.floor(Math.random() * rows.length)];
      const prize = Math.floor(Math.random() * 1000);
      db.run('INSERT INTO winners (name, telegramId, prize, timestamp) VALUES (?, ?, ?, ?)', [winner.name, winner.telegramId, prize, Date.now()]);
      bot.telegram.sendMessage(chatId, `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}, –ø—Ä–∏–∑: ${prize}‚ÇΩ`);
    });
  }, diff);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Å–ø–∏–Ω–∞
function scheduleHourlySpin() {
  const now = new Date();
  const next = new Date(now);
  next.setMinutes(0, 0, 0, 0);
  next.setHours(now.getHours() + 1);
  const diff = next - now;
  scheduledSpin = setTimeout(async () => {
    const chatId = ADMIN_ID; // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    bot.telegram.sendMessage(chatId, 'üé° –ß–∞—Å–æ–≤–æ–π –∞–≤—Ç–æ—Å–ø–∏–Ω: –≤—Ä–∞—â–∞–µ–º –∫–æ–ª–µ—Å–æ...');
    db.all('SELECT name, telegramId FROM participants', (err, rows) => {
      if (err || !rows.length) {
        return bot.telegram.sendMessage(chatId, '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø–∏–Ω–∞.');
      }
      const winner = rows[Math.floor(Math.random() * rows.length)];
      const prize = Math.floor(Math.random() * 1000);
      db.run('INSERT INTO winners (name, telegramId, prize, timestamp) VALUES (?, ?, ?, ?)', [winner.name, winner.telegramId, prize, Date.now()]);
      bot.telegram.sendMessage(chatId, `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}, –ø—Ä–∏–∑: ${prize}‚ÇΩ`);
    });
    scheduleHourlySpin();
  }, diff);
  logger.info(`–ß–∞—Å–æ–≤–æ–π –∞–≤—Ç–æ—Å–ø–∏–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${next.toLocaleString()}`);
}

// Express API
const app = express();

// Serve static front-end files
app.use(express.static(require('path').join(__dirname, '..')));

// Enable CORS
app.use(cors());
// Parse JSON bodies
app.use(bodyParser.json());

// Webhook endpoint: raw parsing to capture updates and log them
if (process.env.HOST_URL) {
  const hookPath = process.env.WEBHOOK_PATH || '/bot';
  app.post(
    hookPath,
    bodyParser.raw({ type: 'application/json' }),
    (req, res) => {
      let update;
      try {
        update = JSON.parse(req.body);
      } catch (err) {
        logger.error('Webhook parse error:', err);
        return res.status(400).send('Invalid JSON');
      }
      logger.info(`Webhook update received: ${JSON.stringify(update)}`);
      return bot.handleUpdate(update, res)
        .catch(err => logger.error('Webhook update error:', err));
    }
  );
}

app.use(express.json());
app.use(cors());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(require('path').join(__dirname, '..', 'index.html'));
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/participants', participantsRoute);
app.use('/pending', pendingRoute);
app.use('/winners', winnersRoute);
app.use('/prizepool', prizepoolRoute);
app.use('/spin', spinRoute);
app.use('/timer', timerRoute);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Express
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => logger.info(`Server listening on ${PORT}`));
app.use((err, req, res, next) => {
  logger.error('Unhandled Express error', err);
  res.status(500).json({ error: 'Internal server error' });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: polling –ª–æ–∫–∞–ª—å–Ω–æ, webhook –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
bot.catch((err, ctx) => logger.error(`Bot error: ${ctx.updateType}`, err));
const HOST_URL = process.env.HOST_URL;
const WEBHOOK_PATH = process.env.WEBHOOK_PATH || '/bot';
logger.info(`HOST_URL=${HOST_URL}, WEBHOOK_PATH=${WEBHOOK_PATH}`);
if (HOST_URL) {
  // Production Webhook
  (async () => {
    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      logger.info('–ü—Ä–µ–¥—ã–¥—É—â–∏–π webhook —É–¥–∞–ª—ë–Ω, pending updates —Å–±—Ä–æ—à–µ–Ω—ã');
      await bot.telegram.setWebhook(`${HOST_URL}${WEBHOOK_PATH}`);
      logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${HOST_URL}${WEBHOOK_PATH}`);
      const webhookInfo = await bot.telegram.getWebhookInfo();
      logger.info(`Webhook info: ${JSON.stringify(webhookInfo)}`);
    } catch (err) {
      logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
    }
  })();
} else {
  // Local polling
  bot.launch()
    .then(() => logger.info('Telegram bot started (polling)'))
    .catch(err => logger.error('Bot launch error:', err));
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
  // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å–æ–≤–æ–π –∞–≤—Ç–æ—Å–ø–∏–Ω
  scheduleHourlySpin();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã
process.on('SIGINT', () => {
  db.close((err) => {
    if (err) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã:', err);
    }
    logger.info('–ë–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–∞');
    process.exit();
  });
});
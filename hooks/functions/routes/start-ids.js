const express = require('express');
const db = require('../db');
const { sendTelegramMessage } = require('../services/telegram');
const { ADMIN_ID } = require('../bot'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_ID
const router = express.Router();

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É start_ids, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
// (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å)
db.run(`CREATE TABLE IF NOT EXISTS start_ids (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  telegramId TEXT NOT NULL UNIQUE,
  created_at INTEGER NOT NULL
)`);

db.run(`CREATE TABLE IF NOT EXISTS paid_users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  telegramId TEXT NOT NULL UNIQUE,
  name TEXT,
  paid_at INTEGER NOT NULL
)`);

db.run(`CREATE TABLE IF NOT EXISTS participating_users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  telegramId TEXT NOT NULL UNIQUE,
  name TEXT,
  joined_at INTEGER NOT NULL
)`);

// POST /start-ids ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π id
router.post('/', (req, res) => {
  const { telegramId } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'telegramId required' });
  db.run(
    'INSERT OR IGNORE INTO start_ids (telegramId, created_at) VALUES (?, ?)',
    [telegramId, Date.now()],
    async function (err) { // –î–æ–±–∞–≤–ª—è–µ–º async
      if (err) return res.status(500).json({ error: 'DB error' });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
      if (this.changes > 0) { // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        try {
          await sendTelegramMessage(ADMIN_ID, `üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°—Ç–∞—Ä—Ç"\nüÜî Telegram ID: <code>${telegramId}</code>`, { parse_mode: 'HTML' });
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (—Å—Ç–∞—Ä—Ç):', e);
        }
      }
      return res.json({ success: true });
    }
  );
});

// GET /start-ids ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ id
router.get('/', (req, res) => {
  db.all('SELECT * FROM start_ids', (err, rows) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    res.json(rows);
  });
});

// POST /paid-users ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/paid-users', (req, res) => {
  const { telegramId, name } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'telegramId required' });
  db.run(
    'INSERT OR IGNORE INTO paid_users (telegramId, name, paid_at) VALUES (?, ?, ?)',
    [telegramId, name || null, Date.now()],
    function (err) {
      if (err) return res.status(500).json({ error: 'DB error' });
      return res.json({ success: true });
    }
  );
});

// GET /paid-users ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
router.get('/paid-users', (req, res) => {
  db.all('SELECT * FROM paid_users', (err, rows) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    res.json(rows);
  });
});

// POST /participating-users ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ—à–∏–≤—à–µ–≥–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
router.post('/participating-users', (req, res) => {
  const { telegramId, name } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'telegramId required' });
  db.run(
    'INSERT OR IGNORE INTO participating_users (telegramId, name, joined_at) VALUES (?, ?, ?)',
    [telegramId, name || null, Date.now()],
    async function (err) { // –î–æ–±–∞–≤–ª—è–µ–º async
      if (err) return res.status(500).json({ error: 'DB error' });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ—à–∏–≤—à–µ–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
      if (this.changes > 0) { // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        try {
          await sendTelegramMessage(ADMIN_ID, `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"\nüÜî Telegram ID: <code>${telegramId}</code>`, { parse_mode: 'HTML' });
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (—É—á–∞—Å—Ç–∏–µ):', e);
        }
      }
      return res.json({ success: true });
    }
  );
});

// GET /participating-users ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ä–µ—à–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
router.get('/participating-users', (req, res) => {
  db.all('SELECT * FROM participating_users', (err, rows) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    res.json(rows);
  });
});

module.exports = router;

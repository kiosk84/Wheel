const express = require('express');
const db = require('../db');
// Import bot and ADMIN_ID from the bot module to avoid cyclic dependency
const { bot, ADMIN_ID } = require('../bot');
const router = express.Router();

// GET /pending (List pending names - requires admin check potentially)
// TODO: Add authentication/authorization check if this should be admin-only
router.get('/', (req, res) => {
  db.all('SELECT name FROM pending', (err, rows) => {
    if (err) return res.status(500).json({ error: 'Database error' });
    res.json(rows.map(r => r.name));
  });
});

// GET /pending/check?telegramId=...  –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ telegramId
router.get('/check', (req, res) => {
  const telegramId = req.query.telegramId;
  if (!telegramId) return res.status(400).json({ error: 'telegramId required' });
  // Admin bypass
  if (telegramId === ADMIN_ID) return res.json({ success: true });
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending
  db.get('SELECT 1 FROM pending WHERE telegramId = ?', [telegramId], (err, row) => {
    if (err) return res.status(500).json({ error: 'Database error' });
    if (row) return res.status(409).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.' });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º participants
    db.get('SELECT 1 FROM participants WHERE telegramId = ?', [telegramId], (err2, row2) => {
      if (err2) return res.status(500).json({ error: 'Database error' });
      if (row2) return res.status(409).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.' });
      res.json({ success: true });
    });
  });
});

// POST /pending
router.post('/', (req, res) => {
  const { name, telegramId } = req.body;
  // Admin fast-add: bypass pending, insert directly into participants
  if (telegramId === ADMIN_ID) {
    // –î–ª—è –∞–¥–º–∏–Ω–∞ —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ª–∏–º–∏—Ç—ã ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const newId = `admin_${Date.now()}`;
    db.run('INSERT INTO participants (name, telegramId) VALUES (?, ?)', [name, newId], (err2) => {
      if (err2) return res.status(500).json({ error: 'DB error' });
      // Increment prize pool
      db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1', (err3) => {
        if (err3) console.error('Prize pool update error:', err3);
        return res.json({ success: true, admin: true });
      });
    });
    return;
  }
  if (!name || !telegramId) return res.status(400).json({ error: 'Name and telegramId required' });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  if (telegramId === ADMIN_ID) {
    // –î–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç –∏–º–µ–Ω–∏
    db.get('SELECT * FROM pending WHERE name = ?', [name], (err3, row3) => {
      if (row3) return res.status(409).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É.' });
      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ pending —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º telegramId –¥–ª—è –∞–¥–º–∏–Ω–∞
      const adminTempId = `admin_add_${Date.now()}`;
      db.run('INSERT INTO pending (name, telegramId) VALUES (?, ?)', [name, adminTempId], (err4) => {
        if (err4) return res.status(500).json({ error: 'DB error' });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∫—É, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω–æ–º
        db.run('INSERT INTO participants (name, telegramId) VALUES (?, ?)', [name, adminTempId], function(err5) {
          if (err5) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞' });

          // –£–¥–∞–ª—è–µ–º –∏–∑ pending
          db.run('DELETE FROM pending WHERE telegramId = ?', [adminTempId], (err6) => {
            if (err6) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ pending:', err6);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
            db.run('UPDATE prize_pool SET amount = amount + 100 WHERE id = 1', (err7) => {
              if (err7) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞:', err7);

              res.json({
                success: true,
                message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º',
                adminAdd: true
              });
            });
          });
        });
      });
    });
    return;
  }

  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  // Check if user already pending by telegramId
  db.get('SELECT * FROM pending WHERE telegramId = ?', [telegramId], (err, row) => {
    if (row) return res.status(409).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.' });
    // Check if already registered by telegramId
    db.get('SELECT * FROM participants WHERE telegramId = ?', [telegramId], (err2, row2) => {
      if (row2) return res.status(409).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.' });
      // Check duplicate name
      db.get('SELECT * FROM pending WHERE name = ?', [name], (err3, row3) => {
        if (row3) return res.status(409).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É.' });
        // Insert into pending
        db.run('INSERT INTO pending (name, telegramId) VALUES (?, ?)', [name, telegramId], (err4) => {
          if (err4) return res.status(500).json({ error: 'DB error' });

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram –Ω–∞ —Ä—É—Å—Å–∫–æ–º
          bot.telegram.sendMessage(
            ADMIN_ID,
            `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ</b>\n\nüë§ <b>–ò–º—è:</b> ${name}\nüÜî <b>Telegram ID:</b> <code>${telegramId}</code>`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${name}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${name}` }
                  ]
                ]
              }
            }
          );
          res.json({ success: true });
        });
      });
    });
  });
});

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã: pending, participants, prize_pool
router.post('/clear-all', (req, res) => {
  db.serialize(() => {
    db.run('DELETE FROM pending');
    db.run('DELETE FROM participants');
    db.run('UPDATE prize_pool SET amount = 0 WHERE id = 1');
    res.json({ success: true, message: '–ë–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.' });
  });
});

module.exports = router;

// --- –î–û–ë–ê–í–ò–¢–¨: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ ---
// –ù–∞–π–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É callback_data approve_... (–æ–±—ã—á–Ω–æ –≤ bot/index.js –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º)
// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ participants:
//   await sendTelegramMessage(telegramId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.');
